name: CICD Pipeline

on:
  push:
    branches: ['main']

jobs:
  compile:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Java & Maven Installation
        run: |
          java -version
          mvn -version

      - name: Compile With Maven
        run: mvn clean compile

  security-checks:
    runs-on: self-hosted
    needs: compile

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Trivy Installation
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install trivy -y

      - name: Trivy FS Scan
        run: trivy fs --format table -o fs-report.json .

      - name: Gitleaks Installation
        run: sudo apt install gitleaks -y

      - name: Gitleaks Code Scan
        run: gitleaks detect source . -r gitleaks-report.json -f json

  test:
    runs-on: self-hosted
    needs: security-checks

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Java & Maven Installation
        run: |
          java -version
          mvn -version

      - name: Unit Test Cases
        run: mvn clean test

  sonarqube_scan:
    runs-on: self-hosted
    needs: test

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Disabling shallow clones is recommended for improving the relevancy of reporting
          fetch-depth: 0

      # Triggering SonarQube analysis as results of it are required by Quality Gate check.
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0  # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Check the Quality Gate status.
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

      # Optionally you can use the output from the Quality Gate in another step.
      # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
      - name: "Example show SonarQube Quality Gate Status value"
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

  build:
    runs-on: self-hosted
    needs: sonarqube_scan

    steps:
      - name: Build the Project
        run: mvn package
